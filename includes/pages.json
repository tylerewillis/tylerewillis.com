[
	{
		"header": "Building a Binary Heap in JavaScript",
		"url": "/page/binary-heap-implementation",
		"description": "Binary heaps allow for combined data insertion and max value extraction more efficiently than many other data structures and are used for the efficient heap sort algorithm.",
		"category": "Code Examples"
	},
	{
		"header": "Binary Heap Sort Algorithm in JavaScript",
		"url": "/page/heap-sort-algorithm",
		"description": "The heap sort algorithm is one of the most efficient ways to sort values in computer science. This post includes a concise JavaScript implementation of the algorithm.",
		"category": "Code Examples"
	},
	{
		"header": "Creating a Constant-Time JavaScript Stack",
		"url": "/page/javascript-stack",
		"description": "You can create a stack object in JavaScript that will enable you to maintain your data in constant time including pushing, popping and getting the maximum value.",
		"category": "Code Examples"
	},
	{
		"header": "Network Packet Processing Simulation in JavaScript",
		"url": "/page/network-packet-processing",
		"description": "This is a simulation of a network packet processor actively receiving new packets, placing incoming packets in queues and processing them according to size and memory constraints.",
		"category": "Projects"
	},
	{
		"header": "Maximum Value in JavaScript Sliding Window Queue",
		"url": "/page/javascript-sliding-window",
		"description": "We can create an object in JavaScript to behave like a stack and a queue to help us with the sliding window, constant-time conundrum.",
		"category": "Code Examples"
	},
	{
		"header": "Using Priority Queues to Simulate Parallel Processing",
		"url": "/page/priority-queue-processing-simulation",
		"description": "We can use binary heaps to create efficient priority queues. In this code example, we simulate a scheduler program that sends jobs to multiple processors based on priority.",
		"category": "Code Examples"
	},
	{
		"header": "Check balance of brackets in code",
		"url": "/page/bracket-balance",
		"description": "Code examples for validating string balance particularly when it comes to opening and closing brackets.",
		"category": "Code Examples"
	},
	{
		"header": "Tree Data Structures in JavaScript & PHP",
		"url": "/page/tree-data-structures",
		"description": "See how to create, add to trees, remove from trees, traverse trees and more in these JavaScript and PHP coding examples.",
		"category": "Code Examples"
	},
	{
		"header": "Replicating a Dynamic Array in JavaScript",
		"url": "/page/dynamic-array-replication",
		"description": "Although arrays in JavaScript size-up automatically, we can create a stack object to replicate the process of creating a dynamically allocated array.",
		"category": "Code Examples"
	},
	{
		"header": "Sorting Algorithm Animations",
		"url": "/page/sorting-algorithm-animations",
		"description": "Animations and code examples for popular sorting algorithms.",
		"category": "Projects"
	},
	{
		"header": "Computer Science Flashcards",
		"url": "/page/flashcards",
		"description": "Hundreds of flashcards that I've put together to help with the transformation from self-taught coder to computer scientist.",
		"category": "Projects"
	}
]