[
	{
		"header": "My Founder's Journey",
		"url": "/page/founders-journey",
		"description": "9 Product Hunt Submissions, a couple dozen domain names registered, dreams to last for years, and other notables from my journey as a solo-preneur.",
		"category": "Personal"
	},
	{
		"header": "Complete Binary Search Tree Code Implementation in JavaScript",
		"url": "/page/binary-tree-javascript",
		"description": "Binary Trees are common data structures used in computer science specifically for programs geared toward high efficiency searching and output.",
		"category": "Code Examples"
	},
	{
		"header": "Check if Binary Search Tree Structure is Valid",
		"url": "/page/is-binary-search-tree",
		"description": "Binary search trees allow for efficient functionality but only when their nodes follow the rules. Here's how to check if a binary search tree is valid.",
		"category": "Code Examples"
	},
	{
		"header": "Hash Table JavaScript Implementation with Linear Probing",
		"url": "/page/hash-table-linear-probing",
		"description": "Probing allows hash tables to have dynamic sizes which greatly influence memory and time efficiency. Here's how you can build the functionality in JavaScript.",
		"category": "Code Examples"
	},
	{
		"header": "Building a Binary Heap in JavaScript",
		"url": "/page/binary-heap-implementation",
		"description": "Binary heaps allow for combined data insertion and max value extraction more efficiently than many other data structures and are used for the efficient heap sort algorithm.",
		"category": "Code Examples"
	},
	{
		"header": "Binary Heap Sort Algorithm in JavaScript",
		"url": "/page/heap-sort-algorithm",
		"description": "The heap sort algorithm is one of the most efficient ways to sort values in computer science. This post includes a concise JavaScript implementation of the algorithm.",
		"category": "Code Examples"
	},
	{
		"header": "Binary Search Algorithm with Arrays in JavaScript",
		"url": "/page/binary-search-array",
		"description": "The binary search algorithm is one of the most efficient ways to find an element in an already-sorted set of data. We can implement binary search with a simple array data structure in JavaScript.",
		"category": "Code Examples"
	},
	{
		"header": "Storing Big Data With Distributed Hash Tables Simulation",
		"url": "/page/distributed-hash-table",
		"description": "Hash tables provide a great data structure method for storing large quantities of data because, on average, they provide constant time search access to the data.",
		"category": "Projects"
	},
	{
		"header": "Creating a Constant-Time JavaScript Stack",
		"url": "/page/javascript-stack",
		"description": "You can create a stack object in JavaScript that will enable you to maintain your data in constant time including pushing, popping and getting the maximum value.",
		"category": "Code Examples"
	},
	{
		"header": "Network Packet Processing Simulation in JavaScript",
		"url": "/page/network-packet-processing",
		"description": "This is a simulation of a network packet processor actively receiving new packets, placing incoming packets in queues and processing them according to size and memory constraints.",
		"category": "Projects"
	},
	{
		"header": "Maximum Value in JavaScript Sliding Window Queue",
		"url": "/page/javascript-sliding-window",
		"description": "We can create an object in JavaScript to behave like a stack and a queue to help us with the sliding window, constant-time conundrum.",
		"category": "Code Examples"
	},
	{
		"header": "Using Priority Queues to Simulate Parallel Processing",
		"url": "/page/priority-queue-processing-simulation",
		"description": "We can use binary heaps to create efficient priority queues. In this code example, we simulate a scheduler program that sends jobs to multiple processors based on priority.",
		"category": "Code Examples"
	},
	{
		"header": "Check balance of brackets in code",
		"url": "/page/bracket-balance",
		"description": "Code examples for validating string balance particularly when it comes to opening and closing brackets.",
		"category": "Code Examples"
	},
	{
		"header": "Tree Data Structures in JavaScript & PHP",
		"url": "/page/tree-data-structures",
		"description": "See how to create, add to trees, remove from trees, traverse trees and more in these JavaScript and PHP coding examples.",
		"category": "Code Examples"
	},
	{
		"header": "Replicating a Dynamic Array in JavaScript",
		"url": "/page/dynamic-array-replication",
		"description": "Although arrays in JavaScript size-up automatically, we can create a stack object to replicate the process of creating a dynamically allocated array.",
		"category": "Code Examples"
	},
	{
		"header": "Linked List Data Structure Implementation",
		"url": "/page/linked-lists",
		"description": "Linked Lists are a computer science data structure that uses pointers to connect nodes located at different points in memory. Here we implement linked lists in JavaScript.",
		"category": "Code Examples"
	},
	{
		"header": "Find Inorder Successor in Binary Search Tree",
		"url": "/page/binary-search-tree-successor",
		"description": "Binary search trees aren't a linear data structure, but here's how you can return the next value in the data set just like you can with arrays and linked lists but more efficiently.",
		"category": "Code Examples"
	},
	{
		"header": "Sorting Algorithm Animations",
		"url": "/page/sorting-algorithm-animations",
		"description": "Animations and code examples for popular sorting algorithms.",
		"category": "Projects"
	},
	{
		"header": "Computer Science Flashcards",
		"url": "/page/flashcards",
		"description": "Hundreds of flashcards that I've put together to help with the transformation from self-taught coder to computer scientist.",
		"category": "Projects"
	},
	{
		"header": "Depth-First Traversal Orders in Binary Trees",
		"url": "/page/depth-first-traversal-orders",
		"description": "Unlike common data structures such as arrays, stacks and linked lists, tree data structures can be traversed and values returned in multiple ways. Here are a few depth-first traversal orders.",
		"category": "Code Examples"
	},
	{
		"header": "Using Rabin-Karp's Algorithm to Find All Occurrences of Substring",
		"url": "/page/rabin-karp-javascript",
		"description": "Rabin-Karp's Substring Algorithm allows us to find occurrences of substrings in text using hashing. Here is an implementation of the algorithm in JavaScript.",
		"category": "Code Examples"
	},
	{
		"header": "Storing Phone Numbers with Direct Address Hashing",
		"url": "/page/direct-addressing",
		"description": "Direct addressing is method of storing values in a variable that allow for constant time addition, deletion and value returning. Here's a JavaScript implementation.",
		"category": "Code Examples"
	}
]