extends ../pages/pages/layout.pug

block pages-head
	include ../pages/pages/meta.pug

block example-content
	.write-up
		h1 Empty an Array and All References in JavaScript and PHP
		h2 Use Case: Showing competence in your programming interview
		p In your programming interview, you may be asked to demonstrate how to empty an array and update all references to the array's variable.
		p There are multiple ways to do this, but the trick is to update the references as well as the original array.
		p Below I'm going to show you how you can do this in both JavaScript and PHP so that you can adequately answer this question in your coding interview.
		p If you'd rather see this post in video format, watch the video below and be sure to subscribe to my YouTube playlist 
			a(href='https://www.youtube.com/playlist?list=PLSnaUTnN_9O0BnsLJK6QZ3OfwlYgxcSNv' target='_blank') Tyler Answers Interview Questions
			| .
		iframe(src="https://www.youtube.com/embed/ZfO1b3rbnRE" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen)
		//------------------------------------------------------
		h3 JavaScript Solutions
		p There are a few ways to empty an array in JavaScript. If the first thing that came to your mind was a solution like this:

		.example
			p.label JavaScript
			pre
				code.language-javascript
					|var array = [1,2,3,4,5]
					|
					|var arr = array
					|
					|while(array.length) {
					|	array.pop();
					|}
		
		p ... then you're not alone, but there are some more simple ways to do this without creating a loop in your application.
		p You can assign the variable the value of an empty array:

		.example
			p.label JavaScript
			pre
				code.language-javascript
					|var array = [1,2,3,4,5]
					|
					|var arr = array
					|
					|array = []
					|
					|console.log(arr) // [1,2,3,4,5]

		p But reassigning the value won't update the 
			strong arr
			|  reference.
		p This solution, however, will empty both the original variable and all references to it:

		.example
			p.label JavaScript
			pre
				code.language-javascript
					|var array = [1,2,3,4,5]
					|
					|var arr = array
					|
					|array.length = 0
					|
					|console.log(arr) // []

		p JavaScript's native 
			strong splice
			|  method on the array variable will also work when passed a single argument of 0:

		.example
			p.label JavaScript
			pre
				code.language-javascript
					|var array = [1,2,3,4,5]
					|
					|var arr = array
					|
					|array.splice(0)
					|
					|console.log(arr) // []

		//------------------------------------------------------
		h3 PHP Solution
		p Our PHP solution is a little trickier, and may require making updates to your existing application.
		P I'll show you why in a moment.
		p Just like JavaScript, this similar solution will empty the original variable but not the variables that were assigned to the value of the original variable:

		.example
			p.label PHP
			pre
				code.language-php
					|$array = [1,2,3,4,5];
					|
					|$arr = $array;
					|
					|$array = [];
					|
					|var_dump($arr); // [1,2,3,4,5]

		p We could use PHP's native 
			strong unset
			|  function but that will only remove the existing variable, as well:

		.example
			p.label PHP
			pre
				code.language-php
					|$array = [1,2,3,4,5];
					|
					|$arr = $array;
					|
					|unset($array);
					|
					|var_dump($arr); // [1,2,3,4,5]

		p The problem is that by setting the value of 
			strong $arr
			|  equal to (with the 
			strong =
			|  sign) we are copying the variable's value, not creating a reference to it. So, when we try to empty the original array, no update is made to variables that have copied the value.
		p The solution to this is that when we want to create a reference to another variable in PHP, we use the 
			strong &
			|  symbol, like this:

		.example
			p.label PHP
			pre
				code.language-php
					|$array = [1,2,3,4,5];
					|
					|$arr = &$array;

		p And then we can set the original array equal to an empty array and both the original and all references will be updated:

		.example
			p.label PHP
			pre
				code.language-php
					|$array = [1,2,3,4,5];
					|
					|$arr = &$array;
					|
					|$array = [];
					|
					|var_dump($arr); // []

		p 
			strong Unset
			| , however, will still not work as it only removes the specific, given variable.


		.example
			p.label PHP
			pre
				code.language-php
					|$array = [1,2,3,4,5];
					|
					|$arr = &$array;
					|
					|unset($array);
					|
					|var_dump($arr); // [1,2,3,4,5]












